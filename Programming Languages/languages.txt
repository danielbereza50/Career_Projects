
/* python section */

def get_smallest_odd(numlist):
	oddcount = 0
	smallest = float('inf')
	for num in numlist:
		if(num % 2) != 0:	
			oddcount += 1
			if num < smallest:



			
			// insert missing code

	return oddcount, smallest




/* C section */

int mystrcopy(char *destionation, char *original){
	
	int count = 0;


	while(*original != '\0'){
		*destination++ = *original++;


		/*  insert missing code */

	}// end of while 


	*destination = * original
}

#include <stdboo.h>

bool is_lowercase(const char *string){
	char *p = string;
	do{
		if((*p < 'a') || *p > 'z' 
		&& *p != '\0'){


		 // insert missing code
		} // end of if


	}while(*p++ != '\0');
		return true;
}




/* Java section */

function findLargestIndex(theArray){
	index = 0;
	largestValue = theArray[0];
	for(i = 0; i < theArray.length; i++){
		if(theArray[i] > largestvalue){
			index = i;


			// insert missing code

		}

	}
	return index;
}
public list<Integer> someFunction(final List<integer> numbers){
	List<Integer> result = new ArrayList<Integer>();
	for(int i = numbers.size() - 1; i >= 0; i--){
		result.add(numbers.get(i));
	}
	return result;
}

public Node someFunction(Node root, int key){
	if(root == null || root.key == key){
		return root;
	}

	if(root.key > key){
		return someFunction(root.left, key);
	}
	
	return someFunction(root.right, key);
}

public boolean isSpecial(String text){
	String tempText = alterText(text);
	return text.equals(tempText);
}
public String alterText(String inputText){
	if(inputText == null || inputText.isEmpty()){
		return inputText; 
	}
	return inputText.charAt(inputText.length() - 1) + 
		alterText(inputText.substring(0, inputText.length() - 1));
}




